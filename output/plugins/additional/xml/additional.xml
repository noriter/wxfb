<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<package name="Additional" lib="libadditional" icon="tree_ctrl.xpm" desc="wxWidgets additional controls">

  <objectinfo class="wxTreeCtrl" icon="tree_ctrl.xpm" type="widget" hidden="1">
    <inherits class="wxTreeCtrlBase" />
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">treeCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxTR_EDIT_LABELS"             help="Use this style if you wish the user to be able to edit labels in the tree control." />
      <option name="wxTR_NO_BUTTONS"              help="For convenience to document that no buttons are to be drawn." />
      <option name="wxTR_HAS_BUTTONS"             help="Use this style to show + and - buttons to the left of parent items." />
      <option name="wxTR_TWIST_BUTTONS"           help="??" />
      <option name="wxTR_NO_LINES"                help="Use this style to hide vertical level connectors." />
      <option name="wxTR_FULL_ROW_HIGHLIGHT"      help="Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify wxTR_NO_LINES as well.)" />
      <option name="wxTR_LINES_AT_ROOT"           help="Use this style to show lines between root nodes. Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set." />
      <option name="wxTR_HIDE_ROOT"               help="Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes." />
      <option name="wxTR_ROW_LINES"               help="Use this style to draw a contrasting border between displayed rows." />
      <option name="wxTR_HAS_VARIABLE_ROW_HEIGHT" help="Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only." />
      <option name="wxTR_SINGLE"                  help="For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default." />
      <option name="wxTR_MULTIPLE"                help="Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected." />
      <option name="wxTR_EXTENDED"                help="Use this style to allow disjoint items to be selected. (Only partially implemented; may not work in all cases.)" />
      <option name="wxTR_DEFAULT_STYLE"           help="The set of flags that are closest to the defaults for the native control for a particular toolkit." />wxTR_DEFAULT_STYLE
    </property>
    <event name="OnTreeGetInfo" class="wxTreeEvent" help="Request information from the application." />
    <event name="OnTreeSetInfo" class="wxTreeEvent" help="Information is being supplied." />
    <event name="OnTreeItemGetTooltip" class="wxTreeEvent" help="The opportunity to set the item tooltip is being given to the application (call wxTreeEvent::SetToolTip). Windows only." />
    <event name="OnTreeStateImageClick" class="wxTreeEvent" help="The state image has been clicked. Windows only." />
  </objectinfo>

  <objectinfo class="wxHtmlWindow" icon="htmlwin.png" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">htmlWin</property>
    <property name="style" type="bitlist">
      <option name="wxHW_SCROLLBAR_NEVER" help="Never display scrollbars, not even when the page is larger than the window." />
      <option name="wxHW_SCROLLBAR_AUTO"  help="Display scrollbars only if page's size exceeds window's size." />
      <option name="wxHW_NO_SELECTION"    help="Don't allow the user to select text." />wxHW_SCROLLBAR_AUTO
    </property>
    <event name="OnHtmlCellClicked" class="wxHtmlCellEvent" help="A wxHtmlCell was clicked." />
    <event name="OnHtmlCellHover" class="wxHtmlCellEvent" help="The mouse passed over a wxHtmlCell." />
    <event name="OnHtmlLinkClicked" class="wxHtmlLinkEvent" help="A wxHtmlCell which contains an hyperlink was clicked." />
  </objectinfo>

  <objectinfo class="wxWebView" icon="webview.png" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">webView</property>
    <event name="OnNavigation" class="wxWebViewEvent" help="Event generated before trying to get a resource."/>
    <event name="OnNavigated" class="wxWebViewEvent" help="Event generated after it was confirmed that a resource would be requested."/>
    <event name="OnLoaded" class="wxWebViewEvent" help="Event generated when the document is fully loaded and displayed."/>
    <event name="OnError" class="wxWebViewEvent" help="Event generated when a navigation error occurs."/>
    <event name="OnNewWindow" class="wxWebViewEvent" help="Event generated when a new window is created."/>
    <event name="OnTitleChanged" class="wxWebViewEvent" help="Event generated when the page title changes."/>
  </objectinfo>

  <objectinfo class="wxRichTextCtrl" icon="richtextctrl.xpm" type="expanded_widget">
    <inherits class="wxWindow">
      <property name="window_style">wxVSCROLL|wxHSCROLL|wxNO_BORDER|wxWANTS_CHARS</property>
    </inherits>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">richText</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_READONLY"      help="The text will not be user-editable."/>
      <option name="wxTE_AUTO_URL"      help="Highlight the URLs and generate the wxTextUrl events when mouse events occur over them."/>
    </property>
    <event name="OnText" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
    <event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
    <event name="OnTextURL" class="wxTextUrlEvent" help="A mouse event occurred over an URL in the text control (wxMSW and wxGTK2 only)" />
    <event name="OnTextMaxLen" class="wxCommandEvent" help="User tried to enter more text into the control than the limit set by SetMaxLength." />
    <event name="OnRichTextCharacter" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CHARACTER event, generated when the user presses a character key. Valid event functions: GetFlags, GetPosition, GetCharacter." />
    <event name="OnRichTextDelete" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_DELETE event, generated when the user presses the backspace or delete key. Valid event functions: GetFlags, GetPosition." />
    <event name="OnRichTextReturn" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_RETURN event, generated when the user presses the return key. Valid event functions: GetFlags, GetPosition." />
    <event name="OnRichTextStyleChanged" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED event, generated when styling has been applied to the control. Valid event functions: GetPosition, GetRange." />
    <event name="OnRichTextStyleSheetChanged" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING event, generated when the control's stylesheet has changed, for example the user added, edited or deleted a style. Valid event functions: GetRange, GetPosition." />
    <event name="OnRichTextStyleSheetReplacing" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING event, generated when the control's stylesheet is about to be replaced, for example when a file is loaded into the control. Valid event functions: Veto, GetOldStyleSheet, GetNewStyleSheet." />
    <event name="OnRichTextStyleSheetReplaced" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED event, generated when the control's stylesheet has been replaced, for example when a file is loaded into the control. Valid event functions: GetOldStyleSheet, GetNewStyleSheet." />
    <event name="OnRichTextContentInserted" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED event, generated when content has been inserted into the control. Valid event functions: GetPosition, GetRange." />
    <event name="OnRichTextContentDeleted" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED event, generated when content has been deleted from the control. Valid event functions: GetPosition, GetRange." />
  </objectinfo>

  <objectinfo class="wxStyledTextCtrl" icon="styledtextctrl.png" type="expanded_widget">
    <inherits class="wxWindow">
      <property name="window_style">wxVSCROLL|wxHSCROLL|wxNO_BORDER|wxWANTS_CHARS</property>
    </inherits>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">styledtext</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_READONLY"      help="The text will not be user-editable."/>
      <option name="wxTE_AUTO_URL"      help="Highlight the URLs and generate the wxTextUrl events when mouse events occur over them."/>
    </property>
    <event name="OnChange" class="wxStyledTextEvent"/>
    <event name="OnStyleNeeded" class="wxStyledTextEvent"/>
    <event name="OnCharAdded" class="wxStyledTextEvent"/>
    <event name="OnSavePointReached" class="wxStyledTextEvent"/>
    <event name="OnSavePointLeft" class="wxStyledTextEvent"/>
    <event name="OnReadOnlyModifyAttempt" class="wxStyledTextEvent"/>
    <event name="OnKey" class="wxStyledTextEvent"/>
    <event name="OnDoubleClick" class="wxStyledTextEvent"/>
    <event name="OnUpdateUI" class="wxStyledTextEvent"/>
    <event name="OnModified" class="wxStyledTextEvent"/>
    <event name="OnMacroRecord" class="wxStyledTextEvent"/>
    <event name="OnMarginClick" class="wxStyledTextEvent"/>
    <event name="OnNeedShown" class="wxStyledTextEvent"/>
    <event name="OnPainted" class="wxStyledTextEvent"/>
    <event name="OnUserListSelection" class="wxStyledTextEvent"/>
    <event name="OnURIDropped" class="wxStyledTextEvent"/>
    <event name="OnDwellStart" class="wxStyledTextEvent"/>
    <event name="OnDwellEnd" class="wxStyledTextEvent"/>
    <event name="OnStartDrag" class="wxStyledTextEvent"/>
    <event name="OnDragOver" class="wxStyledTextEvent"/>
    <event name="OnDoDrop" class="wxStyledTextEvent"/>
    <event name="OnZoom" class="wxStyledTextEvent"/>
    <event name="OnHotspotClick" class="wxStyledTextEvent"/>
    <event name="OnHotspotDClick" class="wxStyledTextEvent"/>
    <event name="OnCallTipClick" class="wxStyledTextEvent"/>
    <event name="OnAutoCompSelection" class="wxStyledTextEvent"/>
    <event name="OnIndicatorClick" class="wxStyledTextEvent"/>
    <event name="OnIndicatorRelease" class="wxStyledTextEvent"/>
    <event name="OnAutoCompCancelled" class="wxStyledTextEvent"/>
    <event name="OnAutoCompCharDeleted" class="wxStyledTextEvent"/>
  </objectinfo>

  <objectinfo class="wxCheckListBox" icon="checklistbox.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">checkList</property>
    <property name="style" type="bitlist">
      <option name="wxLB_SINGLE"    help="Single-selection list." />
      <option name="wxLB_MULTIPLE"  help="Multiple-selection list: the user can toggle multiple items on and off." />
      <option name="wxLB_EXTENDED"  help="Extended-selection list: the user can select multiple items using the SHIFT key and the mouse or special key combinations." />
      <option name="wxLB_HSCROLL"   help="Create horizontal scrollbar if contents are too wide (Windows only)." />
      <option name="wxLB_ALWAYS_SB" help="Always show a vertical scrollbar." />
      <option name="wxLB_NEEDED_SB" help="Only create a vertical scrollbar if needed." />
      <option name="wxLB_SORT"      help="The listbox contents are sorted in alphabetical order." />
    </property>
    <property name="choices" type="stringlist" help="List of default values." />
    <event name="OnCheckListBoxToggled" class="wxCommandEvent" help="Process a wxEVT_COMMAND_CHECKLISTBOX_TOGGLED event, when an item in the check list box is checked or unchecked." />
    <event name="OnCheckListBox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_SELECTED event, when an item on the list is selected." />
    <event name="OnCheckListBoxDClick" class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_DOUBLECLICKED event, when the listbox is double-clicked." />
  </objectinfo>

  <objectinfo class="wxEditableListBox" icon="editlbox.png" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">editList</property>
    <property name="style" type="bitlist">
      <option name="wxEL_ALLOW_NEW"     help="Allows the user to enter new strings."/>
      <option name="wxEL_ALLOW_EDIT"    help="Allows the user to edit existing strings."/>
      <option name="wxEL_ALLOW_DELETE"  help="Allows the user to delete existing strings."/>
      <option name="wxEL_NO_REORDER"    help="Does not allow the user to reorder the strings."/>
      wxEL_ALLOW_NEW | wxEL_ALLOW_EDIT | wxEL_ALLOW_DELETE
    </property>
    <property name="label" type="wxString_i18n">MyEditList</property>
    <property name="strings" type="stringlist" help="Editable string values." />
  </objectinfo>

  <objectinfo class="wxSimpleHtmlListBox" icon="shtmllbox.png" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">htmlList</property>
    <property name="style" type="bitlist">
      <option name="wxHLB_MULTIPLE" help="Multiple-selection list: the user can toggle multiple items on and off."/>
    </property>
    <event name="OnSelected"    class="wxCommandEvent"    help="when an item on the list is selected."/>
    <event name="OnDClick"      class="wxCommandEvent"    help="when the listbox is double-clicked."/>
    <event name="OnCellClicked" class="wxHtmlCellEvent"   help="when a html cell was clicked."/>
    <event name="OnCellHover"   class="wxHtmlCellEvent"   help="The mouse passed over a html cell."/>
    <event name="OnLinkClicked" class="wxHtmlLinkEvent"   help="a html cell which contains an hyperlink was clicked."/>
    <property name="items" type="stringlist" help="html string items." />
  </objectinfo>

  <objectinfo class="wxDataViewCtrl" icon="dataview.png" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">dataview</property>
    <property name="type" type="option">
      <option name="DataView"/>
      <option name="DataViewList"/>
      <option name="DataViewTree"/>
      DataView
    </property>
    <property name="style" type="bitlist">
      <option name="wxDV_SINGLE"      help="Single selection mode. This is the default."/>
      <option name="wxDV_MULTIPLE"    help="Multiple selection mode."/>
      <option name="wxDV_ROW_LINES"   help="Use alternating colours for rows if supported by platform and theme."/>
      <option name="wxDV_HORIZ_RULES" help="Display fine rules between row if supported. "/>
      <option name="wxDV_VERT_RULES"  help="Display fine rules between columns is supported. "/>
      <option name="wxDV_VARIABLE_LINE_HEIGHT" help="Allow variable line heights. This can be inefficient when displaying large number of items. "/>
      <option name="wxDV_NO_HEADER"   help="Do not show column headers (which are shown by default)."/>
      wxDV_SINGLE
    </property>
    <event name="OnSelectionChanged" class="wxDataViewEvent"/>
    <event name="OnItemActivated" class="wxDataViewEvent"     help="This event is triggered by double clicking an item or pressing some special key (usually 'Enter') when it is focused."/>
    <event name="OnItemStartEditing" class="wxDataViewEvent"  help="This event can be vetoed in order to prevent editing on an item by item basis."/>
    <event name="OnItemEditingStarted" class="wxDataViewEvent" />
    <event name="OnItemEditingDone" class="wxDataViewEvent" />
    <event name="OnItemCollapsing" class="wxDataViewEvent" />
    <event name="OnItemCollapsed" class="wxDataViewEvent" />
    <event name="OnItemExpanding" class="wxDataViewEvent" />
    <event name="OnItemExpanded" class="wxDataViewEvent" />
    <event name="OnItemValueChanged" class="wxDataViewEvent" />
    <event name="OnItemContextMenu" class="wxDataViewEvent"   help="Event generated when the user right clicks inside the control. "/>
    <event name="OnColumnHeaderClick" class="wxDataViewEvent" />
    <event name="OnColumnHeaderRightClick" class="wxDataViewEvent" />
    <event name="OnColumnSorted" class="wxDataViewEvent" />
    <event name="OnColumnReordered" class="wxDataViewEvent" />
    <event name="OnItemBeginDrag" class="wxDataViewEvent" />
    <event name="OnItemDropPossible" class="wxDataViewEvent" />
    <event name="OnItemDrop" class="wxDataViewEvent" />
  </objectinfo>

  <objectinfo class="wxGrid" icon="grid.xpm" type="widget" hidden="1">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">grid</property>
    <category name="Grid">
      <property name="rows" type="uint" help="Number of Rows.">5</property>
      <property name="cols" type="uint" help="Number of Columns.">5</property>
      <property name="editing" type="bool" help="Allow editing grid contents.">1</property>
      <property name="grid_lines" type="bool" help="Show grid lines.">1</property>
      <property name="grid_line_color" type="wxColour" help="The colour used to draw grid lines."/>
      <property name="drag_grid_size" type="bool" help="Allow sizing rows and columns by dragging gridlines.">0</property>
      <property name="margin_width" type="uint" help="A grid may occupy more space than needed for its columns. This function allows to set how big this extra space is.">0</property>
      <property name="margin_height" type="uint" help="A grid may occupy more space than needed for its rows. This function allows to set how big this extra space is.">0</property>
    </category>
    <category name="Columns">
      <property name="column_sizes" type="uintlist" help="Comma separated list of column sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
      <property name="autosize_cols" type="bool" help="Automatically sizes all columns to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
      <property name="drag_col_move" type="bool" help="Allow moving columns by dragging.">0</property>
      <property name="drag_col_size" type="bool" help="Allow sizing columns by dragging.">1</property>
      <property name="col_label_size" type="uint" help="Height of column labels">30</property>
      <property name="col_label_values" type="stringlist" help="List of column labels."></property>
      <property name="col_label_horiz_alignment" type="option" help="Horizontal alignment of column label text.">
        <option name="wxALIGN_LEFT" 	help="Align labels left."/>
        <option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
        <option name="wxALIGN_RIGHT" 	help="Align labels right."/>
        wxALIGN_CENTRE
      </property>
      <property name="col_label_vert_alignment" type="option" help="Vertical alignment of column label text.">
        <option name="wxALIGN_TOP" 	help="Align labels top."/>
        <option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
        <option name="wxALIGN_BOTTOM" 	help="Align labels bottom."/>
        wxALIGN_CENTRE
      </property>
    </category>
    <category name="Rows">
      <property name="row_sizes" type="uintlist" help="Comma separated list of row sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
      <property name="autosize_rows" type="bool" help="Automatically sizes all rows to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
      <property name="drag_row_size" type="bool" help="Allow sizing rows by dragging.">1</property>
      <property name="row_label_size" type="uint" help="Width of row labels">80</property>
      <property name="row_label_values" type="stringlist" help="List of row labels."></property>
      <property name="row_label_horiz_alignment" type="option" help="Horizontal alignment of row label text.">
        <option name="wxALIGN_LEFT" 	help="Align labels left."/>
        <option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
        <option name="wxALIGN_RIGHT" 	help="Align labels right."/>
        wxALIGN_CENTRE
      </property>
      <property name="row_label_vert_alignment" type="option" help="Vertical alignment of row label text.">
        <option name="wxALIGN_TOP" 	help="Align labels top."/>
        <option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
        <option name="wxALIGN_BOTTOM" 	help="Align labels bottom."/>
        wxALIGN_CENTRE
      </property>
    </category>
    <category name="Label Appearance">
      <property name="label_bg" type="wxColour" help="Background color for row and column labels."/>
      <property name="label_font" type="wxFont" help="Font for row and column labels."/>
      <property name="label_text" type="wxColour" help="Colour for row and column label text."/>z
    </category>
    <category name="Cell Defaults">
      <property name="cell_bg" type="wxColour" help="Default cell background color."/>
      <property name="cell_font" type="wxFont" help="Default cell font."/>
      <property name="cell_text" type="wxColour" help="Default cell text color."/>
      <property name="cell_horiz_alignment" type="option" help="Default horizontal alignment of cell values.">
        <option name="wxALIGN_LEFT" 	help="Align left."/>
        <option name="wxALIGN_CENTRE" 	help="Align centered."/>
        <option name="wxALIGN_RIGHT" 	help="Align right."/>
        wxALIGN_LEFT
      </property>
      <property name="cell_vert_alignment" type="option" help="Default vertical alignment of cell values.">
        <option name="wxALIGN_TOP" 	help="Align top."/>
        <option name="wxALIGN_CENTRE" 	help="Align centered."/>
        <option name="wxALIGN_BOTTOM" 	help="Align bottom."/>
        wxALIGN_TOP
      </property>
    </category>
    <event name="OnGridCellLeftClick" class="wxGridEvent" help="The user clicked a cell with the left mouse button. Processes a wxEVT_GRID_CELL_LEFT_CLICK." />
    <event name="OnGridCellRightClick" class="wxGridEvent" help="The user clicked a cell with the right mouse button. Processes a wxEVT_GRID_CELL_RIGHT_CLICK." />
    <event name="OnGridCellLeftDClick" class="wxGridEvent" help="The user double-clicked a cell with the left mouse button. Processes a wxEVT_GRID_CELL_LEFT_DCLICK." />
    <event name="OnGridCellRightDClick" class="wxGridEvent" help="The user double-clicked a cell with the right mouse button. Processes a wxEVT_GRID_CELL_RIGHT_DCLICK." />
    <event name="OnGridLabelLeftClick" class="wxGridEvent" help="The user clicked a label with the left mouse button. Processes a wxEVT_GRID_LABEL_LEFT_CLICK." />
    <event name="OnGridLabelRightClick" class="wxGridEvent" help="The user clicked a label with the right mouse button. Processes a wxEVT_GRID_LABEL_RIGHT_CLICK." />
    <event name="OnGridLabelLeftDClick" class="wxGridEvent" help="The user double-clicked a label with the left mouse button. Processes a wxEVT_GRID_LABEL_LEFT_DCLICK." />
    <event name="OnGridLabelRightDClick" class="wxGridEvent" help="The user double-clicked a label with the right mouse button. Processes a wxEVT_GRID_LABEL_RIGHT_DCLICK." />
    <event name="OnGridCellChange" class="wxGridEvent" help="The user changed the data in a cell. Processes a wxEVT_GRID_CELL_CHANGE." />
    <event name="OnGridSelectCell" class="wxGridEvent" help="The user moved to, and selected a cell. Processes a wxEVT_GRID_SELECT_CELL." />
    <event name="OnGridEditorHidden" class="wxGridEvent" help="The editor for a cell was hidden. Processes a wxEVT_GRID_EDITOR_HIDDEN." />
    <event name="OnGridEditorShown" class="wxGridEvent" help="The editor for a cell was shown. Processes a wxEVT_GRID_EDITOR_SHOWN." />
    <event name="OnGridCmdCellLeftClick" class="wxGridEvent" help="The user clicked a cell with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_LEFT_CLICK." />
    <event name="OnGridCmdCellRightClick" class="wxGridEvent" help="The user clicked a cell with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_RIGHT_CLICK." />
    <event name="OnGridCmdCellLeftDClick" class="wxGridEvent" help="The user double-clicked a cell with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_LEFT_DCLICK." />
    <event name="OnGridCmdCellRightDClick" class="wxGridEvent" help="The user double-clicked a cell with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_RIGHT_DCLICK." />
    <event name="OnGridCmdLabelLeftClick" class="wxGridEvent" help="The user clicked a label with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_LEFT_CLICK" />
    <event name="OnGridCmdLabelRightClick" class="wxGridEvent" help="The user clicked a label with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_RIGHT_CLICK." />
    <event name="OnGridCmdLabelLeftDClick" class="wxGridEvent" help="The user double-clicked a label with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_LEFT_DCLICK." />
    <event name="OnGridCmdLabelRightDClick" class="wxGridEvent" help="The user double-clicked a label with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_RIGHT_DCLICK." />
    <event name="OnGridCmdCellChange" class="wxGridEvent" help="The user changed the data in a cell; variant taking a window identifier. Processes a wxEVT_GRID_CELL_CHANGE." />
    <event name="OnGridCmdSelectCell" class="wxGridEvent" help="The user moved to, and selected a cell; variant taking a window identifier. Processes a wxEVT_GRID_SELECT_CELL." />
    <event name="OnGridCmdEditorHidden" class="wxGridEvent" help="The editor for a cell was hidden; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_HIDDEN." />
    <event name="OnGridCmdEditorShown" class="wxGridEvent" help="The editor for a cell was shown; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_SHOWN." />
    <event name="OnGridColSize" class="wxGridSizeEvent" help="The user resized a column by dragging it. Processes a wxEVT_GRID_COL_SIZE." />
    <event name="OnGridRowSize" class="wxGridSizeEvent" help="The user resized a row by dragging it. Processes a wxEVT_GRID_ROW_SIZE." />
    <event name="OnGridCmdColSize" class="wxGridSizeEvent" help="The user resized a column by dragging it; variant taking a window identifier. Processes a wxEVT_GRID_COL_SIZE." />
    <event name="OnGridCmdRowSize" class="wxGridSizeEvent" help="The user resized a row by dragging it; variant taking a window identifier. Processes a wxEVT_GRID_ROW_SIZE." />
    <event name="OnGridRangeSelect" class="wxGridRangeSelectEvent" help="The user selected a group of contiguous cells. Processes a wxEVT_GRID_RANGE_SELECT." />
    <event name="OnGridCmdRangeSelect" class="wxGridRangeSelectEvent" help="The user selected a group of contiguous cells; variant taking a window identifier. Processes a wxEVT_GRID_RANGE_SELECT." />
    <event name="OnGridEditorCreated" class="wxGridEditorCreatedEvent" help="The editor for a cell was created. Processes a wxEVT_GRID_EDITOR_CREATED." />
    <event name="OnGridCmdEditorCreated" class="wxGridEditorCreatedEvent" help="The editor for a cell was created; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_CREATED." />
  </objectinfo>

  <objectinfo class="wxPropertyGrid" icon="propgrid.png" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">propgrid</property>
    <property name="style" type="bitlist">
      <option name="wxPG_AUTO_SORT"             help="This will cause Sort() automatically after an item is added." />
      <option name="wxPG_HIDE_CATEGORIES"       help="Categories are not initially shown (even if added)."/>
      <option name="wxPG_ALPHABETIC_MODE"       help="This style combines non-categoric mode and automatic sorting." />
      <option name="wxPG_BOLD_MODIFIED"         help="Modified values are shown in bold font."/>
      <option name="wxPG_SPLITTER_AUTO_CENTER"  help="When wxPropertyGrid is resized, splitter moves to the center. This behaviour stops once the user manually moves the splitter."/>
      <option name="wxPG_TOOLTIPS"              help="Display tool tips for cell text that cannot be shown completely."/>
      <option name="wxPG_HIDE_MARGIN"           help="Disables margin and hides all expand/collapse buttons that would appear outside the margin (for sub-properties)."/>
      <option name="wxPG_STATIC_SPLITTER"       help="This style prevents user from moving the splitter."/>
      <option name="wxPG_STATIC_LAYOUT"         help="Combination of other styles that make it impossible for user to modify the layout."/>
      <option name="wxPG_LIMITED_EDITING"       help="Disables wxTextCtrl based editors for properties which can be edited in another way."/>
      wxPG_SPLITTER_AUTO_CENTER
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxPG_EX_INIT_NOCAT"         help="Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is not activated, and switching the mode first time becomes somewhat slower. wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away."/>
      <option name="wxPG_EX_HELP_AS_TOOLTIPS"   help="Show property help strings as tool tips instead as text on the status bar. "/>
      <option name="wxPG_EX_AUTO_UNSPECIFIED_VALUES" help="Set this style to let user have ability to set values of properties to unspecified state."/>
      <option name="wxPG_EX_MULTIPLE_SELECTION" help="Allows multiple properties to be selected by user (by pressing SHIFT when clicking on a property, or by dragging with left mouse button down)."/>
    </property>
    <event name="OnSelected" class="wxPropertyGridEvent" help="Event generated when a property selection has been changed, either by user action or by indirect program function."/>
    <event name="OnChanged" class="wxPropertyGridEvent" help="Event generated when property value has been changed by the user."/>
    <event name="OnChanging" class="wxPropertyGridEvent" help="Event generated when property value is about to be changed by user. Use wxPropertyGridEvent::GetValue() to take a peek at the pending value, and wxPropertyGridEvent::Veto() to prevent change from taking place, if necessary."/>
    <event name="OnHighlighted" class="wxPropertyGridEvent" help="Event which occurs when mouse moves over a property. Event's property is NULL if hovered area does not belong to any property."/>
    <event name="OnRightClick" class="wxPropertyGridEvent" help="Event which occurs when property is clicked on with right mouse button."/>
    <event name="OnDoubleClick" class="wxPropertyGridEvent" help="Event which occurs when property is double-clicked on with left mouse button."/>
    <event name="OnItemCollapsed" class="wxPropertyGridEvent" help="Event generated when user collapses a property or category."/>
    <event name="OnItemExpanded" class="wxPropertyGridEvent" help="Event generated when user expands a property or category."/>
    <event name="OnLabelEditBegin" class="wxPropertyGridEvent" help="Event generated when user is about to begin editing a property label. You can veto this event to prevent the action."/>
    <event name="OnLabelEditEnding" class="wxPropertyGridEvent" help="Event generated when user is about to end editing of a property label. You can veto this event to prevent the action."/>
    <event name="OnColBeginDrag" class="wxPropertyGridEvent" help="Event, generated when user starts resizing a column - can be vetoed."/>
    <event name="OnColDragging" class="wxPropertyGridEvent" help="Event, generated when a column resize by user is in progress. This event is also generated when user double-clicks the splitter in order to recenter it."/>
    <event name="OnColEndDrag" class="wxPropertyGridEvent" help="Event, generated after column resize by user has finished."/>
  </objectinfo>

  <objectinfo class="wxPropertyGridManager" icon="propgridmgr.png" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">pgmgr</property>
    <property name="style" type="bitlist">
      <option name="wxPG_AUTO_SORT"             help="This will cause Sort() automatically after an item is added." />
      <option name="wxPG_HIDE_CATEGORIES"       help="Categories are not initially shown (even if added)."/>
      <option name="wxPG_ALPHABETIC_MODE"       help="This style combines non-categoric mode and automatic sorting." />
      <option name="wxPG_BOLD_MODIFIED"         help="Modified values are shown in bold font."/>
      <option name="wxPG_SPLITTER_AUTO_CENTER"  help="When wxPropertyGrid is resized, splitter moves to the center. This behaviour stops once the user manually moves the splitter."/>
      <option name="wxPG_TOOLTIPS"              help="Display tool tips for cell text that cannot be shown completely."/>
      <option name="wxPG_HIDE_MARGIN"           help="Disables margin and hides all expand/collapse buttons that would appear outside the margin (for sub-properties)."/>
      <option name="wxPG_STATIC_SPLITTER"       help="This style prevents user from moving the splitter."/>
      <option name="wxPG_STATIC_LAYOUT"         help="Combination of other styles that make it impossible for user to modify the layout."/>
      <option name="wxPG_LIMITED_EDITING"       help="Disables wxTextCtrl based editors for properties which can be edited in another way."/>
      <option name="wxPG_TOOLBAR"               help="Show tool bar for mode and page selection."/>
      <option name="wxPG_DESCRIPTION"           help="Show adjustable text box showing description or help text, if available, for currently selected property."/>
      <option name="wxPG_NO_INTERNAL_BORDER"    help="don't show an internal border around the property grid. Recommended if you use a header."/>
      wxPG_SPLITTER_AUTO_CENTER | wxPG_NO_INTERNAL_BORDER | wxPG_DESCRIPTION | wxPG_TOOLBAR
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxPG_EX_INIT_NOCAT"         help="Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is not activated, and switching the mode first time becomes somewhat slower. wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away."/>
      <option name="wxPG_EX_NO_FLAT_TOOLBAR"    help="Extended window style that sets wxPropertyGridManager tool bar to not use flat style."/>
      <option name="wxPG_EX_MODE_BUTTONS"       help="Shows alphabetic/categoric mode buttons from tool bar."/>
      <option name="wxPG_EX_HELP_AS_TOOLTIPS"   help="Show property help strings as tool tips instead as text on the status bar. "/>
      <option name="wxPG_EX_AUTO_UNSPECIFIED_VALUES" help="Set this style to let user have ability to set values of properties to unspecified state."/>
      <option name="wxPG_EX_HIDE_PAGE_BUTTONS"  help="Hides page selection buttons from tool bar. "/>
      <option name="wxPG_EX_MULTIPLE_SELECTION" help="Allows multiple properties to be selected by user (by pressing SHIFT when clicking on a property, or by dragging with left mouse button down)."/>
      <option name="wxPG_EX_NO_TOOLBAR_DIVIDER" help="Don't show divider above toolbar, on Windows."/>
      <option name="wxPG_EX_TOOLBAR_SEPARATOR"  help="Show a separator below the toolbar."/>
      wxPG_EX_MODE_BUTTONS | wxPG_EX_NO_TOOLBAR_DIVIDER
    </property>
    <property name="show_header" type="bool"    help="Show or hide the property grid header control.">1</property>
    <event name="OnSelected" class="wxPropertyGridEvent" help="Event generated when a property selection has been changed, either by user action or by indirect program function."/>
    <event name="OnChanged" class="wxPropertyGridEvent" help="Event generated when property value has been changed by the user."/>
    <event name="OnChanging" class="wxPropertyGridEvent" help="Event generated when property value is about to be changed by user. Use wxPropertyGridEvent::GetValue() to take a peek at the pending value, and wxPropertyGridEvent::Veto() to prevent change from taking place, if necessary."/>
    <event name="OnHighlighted" class="wxPropertyGridEvent" help="Event which occurs when mouse moves over a property. Event's property is NULL if hovered area does not belong to any property."/>
    <event name="OnRightClick" class="wxPropertyGridEvent" help="Event which occurs when property is clicked on with right mouse button."/>
    <event name="OnDoubleClick" class="wxPropertyGridEvent" help="Event which occurs when property is double-clicked on with left mouse button."/>
    <event name="OnItemCollapsed" class="wxPropertyGridEvent" help="Event generated when user collapses a property or category."/>
    <event name="OnItemExpanded" class="wxPropertyGridEvent" help="Event generated when user expands a property or category."/>
    <event name="OnLabelEditBegin" class="wxPropertyGridEvent" help="Event generated when user is about to begin editing a property label. You can veto this event to prevent the action."/>
    <event name="OnLabelEditEnding" class="wxPropertyGridEvent" help="Event generated when user is about to end editing of a property label. You can veto this event to prevent the action."/>
    <event name="OnColBeginDrag" class="wxPropertyGridEvent" help="Event, generated when user starts resizing a column - can be vetoed."/>
    <event name="OnColDragging" class="wxPropertyGridEvent" help="Event, generated when a column resize by user is in progress. This event is also generated when user double-clicks the splitter in order to recenter it."/>
    <event name="OnColEndDrag" class="wxPropertyGridEvent" help="Event, generated after column resize by user has finished."/>
  </objectinfo>

  <objectinfo class="wxToggleButton" icon="toggle_button.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">toggleBtn</property>
    <property name="label" type="wxString_i18n">Toggle me!</property>
    <property name="value" type="bool">0</property>
    <event name="OnToggleButton" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RADIOBUTTON_SELECTED event, when the radiobutton is clicked." />
  </objectinfo>

  <objectinfo class="wxInfoBar" icon="infobar.png" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI"/>
    <property name="name" type="text">infobar</property>
    <property name="effect_duration" type="int">500</property>
    <property name="show_effect" type="option">
      <option name="wxSHOW_EFFECT_NONE" help="No effect, equivalent to normal wxWindow::Show() or Hide() call."/>
      <option name="wxSHOW_EFFECT_ROLL_TO_LEFT"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_RIGHT"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_TOP"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_BOTTOM"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_LEFT"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_RIGHT"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_TOP"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_BOTTOM"/>
      <option name="wxSHOW_EFFECT_BLEND"/>
      <option name="wxSHOW_EFFECT_EXPAND"/>
      wxSHOW_EFFECT_NONE
    </property>
    <property name="hide_effect" type="option">
      <option name="wxSHOW_EFFECT_NONE" help="No effect, equivalent to normal wxWindow::Show() or Hide() call."/>
      <option name="wxSHOW_EFFECT_ROLL_TO_LEFT"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_RIGHT"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_TOP"/>
      <option name="wxSHOW_EFFECT_ROLL_TO_BOTTOM"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_LEFT"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_RIGHT"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_TOP"/>
      <option name="wxSHOW_EFFECT_SLIDE_TO_BOTTOM"/>
      <option name="wxSHOW_EFFECT_BLEND"/>
      <option name="wxSHOW_EFFECT_EXPAND"/>
      wxSHOW_EFFECT_NONE
    </property>
  </objectinfo>

  <objectinfo class="wxBannerWindow" icon="bannerwin.png" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <property name="name" type="text">banner</property>
    <property name="dir" type="option">
      <option name="wxLEFT"/>
      <option name="wxTOP"/>
      <option name="wxRIGHT"/>
      <option name="wxBOTTOM"/>
      wxTOP
    </property>
    <property name="title" type="wxString_i18n">title</property>
    <property name="message" type="wxString_i18n">message</property>
    <property name="gradient_start" type="wxColour">wxSYS_COLOUR_ACTIVECAPTION</property>
    <property name="gradient_end" type="wxColour">wxSYS_COLOUR_WINDOW</property>
      <property name="bitmap" type="bitmap"/>
  </objectinfo>

  <objectinfo class="wxSearchCtrl" icon="search.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">searchCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_NOHIDESEL"     help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms."/>
      <option name="wxTE_LEFT"          help="The text in the control will be left-justified (default)."/>
      <option name="wxTE_CENTRE"        help="The text in the control will be centered (currently wxMSW and wxGTK2 only). "/>
      <option name="wxTE_RIGHT"         help="The text in the control will be right-justified (currently wxMSW and wxGTK2 only)."/>
      <option name="wxTE_CAPITALIZE"    help="On PocketPC and Smartphone, causes the first letter to be capitalized."/>
    </property>
    <property name="value" type="wxString_i18n" />
    <property name="search_button" type="bool" help="Shows or hides the search button.">1</property>
    <property name="cancel_button" type="bool" help="Shows or hides the cancel button.">0</property>
    <event name="OnText" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
    <event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
    <event name="OnSearchButton" class="wxCommandEvent" help="Respond to a wxEVT_SEARCHCTRL_SEARCH_BTN event, generated when the search button is clicked. Note that this does not initiate a search." />
    <event name="OnCancelButton" class="wxCommandEvent" help="Respond to a wxEVT_SEARCHCTRL_CANCEL_BTN event, generated when the cancel button is clicked." />
  </objectinfo>
  
  <objectinfo class="wxColourPickerCtrl"  startgroup="1" icon="colourPickerIcon.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">colourPicker</property>
    <property name="style" type="bitlist">
      <option name="wxCLRP_DEFAULT_STYLE" help="The default style: 0."/>
      <option name="wxCLRP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxColourPickerCtrl and which can be used by the user to specify a colour. The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxCLRP_SHOW_LABEL" help="Shows the colour in HTML form (AABBCC) as colour button label (instead of no label at all)."/>
      wxCLRP_DEFAULT_STYLE
    </property>
    <property name="colour" type="wxColour"/>
    <event name="OnColourChanged" class="wxColourPickerEvent" help="The user changed the colour selected in the control either using the button or using text control (see wxCLRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
  </objectinfo>

  <objectinfo class="wxFontPickerCtrl" icon="fontPicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">fontPicker</property>
    <property name="style" type="bitlist">
      <option name="wxFNTP_DEFAULT_STYLE" help="The default style: wxFNTP_FONTDESC_AS_LABEL | wxFNTP_USEFONT_FOR_LABEL."/>
      <option name="wxFNTP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxFontPickerCtrl and which can be used by the user to specify a font (see SetSelectedFont). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxFNTP_FONTDESC_AS_LABEL" help="Keeps the label of the button updated with the fontface name and the font size. E.g. choosing &quot;Times New Roman bold, italic with size 10&quot; from the fontdialog, will update the label (overwriting any previous label) with the &quot;Times New Roman, 10&quot; text."/>
      <option name="wxFNTP_USEFONT_FOR_LABEL" help="Uses the currently selected font to draw the label of the button."/>
      wxFNTP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxFont"/>
    <property name="max_point_size" type="uint" help="Sets the maximum point size value allowed for the user-chosen font. The default value is 100. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it's a good idea to put a limit to the maximum font size when huge fonts do not make much sense.">
      100
    </property>
    <event name="OnFontChanged" class="wxFontPickerEvent" help="The user changed the font selected in the control either using the button or using text control (see wxFNTP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
  </objectinfo>

  <objectinfo class="wxFilePickerCtrl" icon="filePicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">filePicker</property>
    <property name="style" type="bitlist">
      <option name="wxFLP_DEFAULT_STYLE" help="The default style: includes wxFLP_OPEN | wxFLP_FILE_MUST_EXIST and, under wxMSW only, wxFLP_USE_TEXTCTRL."/>
      <option name="wxFLP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxFilePickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxFLP_OPEN" help="Creates a picker which allows the user to select a file to open."/>
      <option name="wxFLP_SAVE" help="Creates a picker which allows the user to select a file to save."/>
      <option name="wxFLP_OVERWRITE_PROMPT" help="Can be combined with wxFLP_SAVE only: ask confirmation to the user before selecting a file."/>
      <option name="wxFLP_FILE_MUST_EXIST" help="Can be combined with wxFLP_OPEN only: the selected file must be an existing file."/>
      <option name="wxFLP_CHANGE_DIR" help="Change current working directory on each user file selection change."/>
      wxFLP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxString"/>
    <property name="message" type="wxString_i18n">Select a file</property>
    <property name="wildcard" type="wxString">*.*</property>
    <event name="OnFileChanged" class="wxFileDirPickerEvent" help="The user changed the file selected in the control either using the button or using text control (see wxFLP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing file path if wxFLP_FILE_MUST_EXIST was given)."/>
  </objectinfo>

  <objectinfo class="wxDirPickerCtrl" icon="dirPicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">dirPicker</property>
    <property name="style" type="bitlist">
      <option name="wxDIRP_DEFAULT_STYLE" help="The default style: includes wxDIRP_DIR_MUST_EXIST and, under wxMSW only, wxDIRP_USE_TEXTCTRL."/>
      <option name="wxDIRP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxDirPickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxDIRP_DIR_MUST_EXIST" help="Creates a picker which allows to select only existing directories. wxGTK control always adds this flag internally as it does not support its absence."/>
      <option name="wxDIRP_CHANGE_DIR" help="Change current working directory on each user directory selection change."/>
      wxDIRP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxString"/>
    <property name="message" type="wxString_i18n">Select a folder</property>
    <event name="OnDirChanged" class="wxFileDirPickerEvent" help="The user changed the directory selected in the control either using the button or using text control (see wxDIRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing directory path)."/>
  </objectinfo>

  <objectinfo class="wxDatePickerCtrl" icon="datepicker.xpm" type="widget" hidden="1">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">datePicker</property>
    <property name="style" type="bitlist">
      <option name="wxDP_SPIN"        help="Creates a control without a month calendar drop down but with spin-control-like arrows to change individual date components. This style is not supported by the generic version." />
      <option name="wxDP_DROPDOWN"    help="Creates a control with a month calendar drop-down part from which the user can select a date." />
      <option name="wxDP_SHOWCENTURY" help="Forces display of the century in the default date format. Without this style the century could be displayed, or not, depending on the default date representation in the system." />
      <option name="wxDP_ALLOWNONE"   help="With this style, the control allows the user to not enter any valid date at all. Without it - the default - the control always has some valid date." />
      <option name="wxDP_DEFAULT"     help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and wxDP_DROPDOWN elsewhere)." />wxDP_DEFAULT
    </property>
    <event name="OnDateChanged" class="wxDateEvent" help="This event fires when the user changes the current selection in the control." />
  </objectinfo>

  <objectinfo class="wxCalendarCtrl" startgroup="1" icon="calendar.xpm" type="widget" hidden="1">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">calendar</property>
    <property name="style" type="bitlist">
      <option name="wxCAL_SUNDAY_FIRST"               help="Show Sunday as the first day in the week." />
      <option name="wxCAL_MONDAY_FIRST"               help="Show Monday as the first day in the week." />
      <option name="wxCAL_SHOW_HOLIDAYS"              help="Highlight holidays in the calendar." />
      <option name="wxCAL_NO_YEAR_CHANGE"             help="Disable the year changing." />
      <option name="wxCAL_NO_MONTH_CHANGE"            help="Disable the month (and, implicitly, the year) changing." />
      <option name="wxCAL_SHOW_SURROUNDING_WEEKS"     help="Show the neighbouring weeks in the previous and next months." />
      <option name="wxCAL_SEQUENTIAL_MONTH_SELECTION" help="Use alternative, more compact, style for the month and year selection controls." />wxCAL_SHOW_HOLIDAYS
    </property>
    <event name="OnCalendar" class="wxCalendarEvent" help="A day was double clicked in the calendar." />
    <event name="OnCalendarSelChanged" class="wxCalendarEvent" help="The selected date changed." />
    <event name="OnCalendarDay" class="wxCalendarEvent" help="The selected day changed." />
    <event name="OnCalendarMonth" class="wxCalendarEvent" help="The selected month changed." />
    <event name="OnCalendarYear" class="wxCalendarEvent" help="The selected year changed." />
    <event name="OnCalendarWeekDayClicked" class="wxCalendarEvent" help="User clicked on the week day header." />
  </objectinfo>

  <objectinfo class="wxScrollBar" icon="scrollbar.xpm" type="widget" hidden="1">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">scrollBar</property>
    <property name="value" help="The position of the scrollbar in scroll units." type="uint">0</property>
    <property name="range" help="The maximum position of the scrollbar." type="uint">100</property>
    <property name="thumbsize" help="The size of the thumb, or visible portion of the scrollbar, in scroll units." type="uint">1</property>
    <property name="pagesize" help="This is the number of scroll units that will be scrolled when the user pages up or down." type="uint">1</property>
    <property name="style" type="option">
      <option name="wxSB_HORIZONTAL" help="Specifies a horizontal scrollbar." />
      <option name="wxSB_VERTICAL"   help="Specifies a vertical scrollbar." />wxSB_HORIZONTAL
    </property>
    <event name="OnScroll" class="wxScrollEvent" help="Process all scroll events." />
    <event name="OnScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position)." />
    <event name="OnScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position)." />
    <event name="OnScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events." />
    <event name="OnScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events." />
    <event name="OnScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events." />
    <event name="OnScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events." />
    <event name="OnScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack)." />
    <event name="OnScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events." />
    <event name="OnScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only)." />
    <event name="OnCommandScroll" class="wxScrollEvent" help="Process all scroll events. Variant taking a window identifier." />
    <event name="OnCommandScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position). Variant taking a window identifier." />
    <event name="OnCommandScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position). Variant taking a window identifier." />
    <event name="OnCommandScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events. Variant taking a window identifier." />
    <event name="OnCommandScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events. Variant taking a window identifier." />
    <event name="OnCommandScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events. Variant taking a window identifier." />
    <event name="OnCommandScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events. Variant taking a window identifier." />
    <event name="OnCommandScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack). Variant taking a window identifier." />
    <event name="OnCommandScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events. Variant taking a window identifier." />
    <event name="OnCommandScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only). Variant taking a window identifier." />
  </objectinfo>

  <objectinfo class="wxSpinCtrl" icon="spin_ctrl.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">spinCtrl</property>
    <property name="value" type="wxString"></property>
    <property name="min" type="int"     help="Minimal value.">0</property>
    <property name="max" type="int"     help="Maximal value.">10</property>
    <property name="initial" type="uint" help="Initial value.">0</property>
    <property name="style" type="bitlist">
      <option name="wxSP_ARROW_KEYS"     help="The user can use arrow keys to change the value." />
      <option name="wxSP_WRAP"           help="The value wraps at the minimum and maximum." />wxSP_ARROW_KEYS
    </property>
    <event name="OnSpinCtrl" class="wxSpinEvent" help="Generated whenever the numeric value of the spinctrl is updated." />
    <event name="OnSpinCtrlText" class="wxCommandEvent" help="Generated whenever the user modifies the text in the edit part of the spin control directly." />
  </objectinfo>

  <objectinfo class="wxSpinButton" icon="spinbtn.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">spinBtn</property>
    <property name="style" type="bitlist">
      <option name="wxSP_HORIZONTAL" help="Specifies a horizontal spin button (note that this style is not supported in wxGTK)." />
      <option name="wxSP_VERTICAL"   help="Specifies a vertical spin button." />
      <option name="wxSP_ARROW_KEYS" help="The user can use arrow keys to change the value." />
      <option name="wxSP_WRAP"       help="The value wraps at the minimum and maximum." />
    </property>
    <event name="OnSpin" class="wxSpinEvent" help="Generated whenever an arrow is pressed." />
    <event name="OnSpinUp" class="wxSpinEvent" help="Generated when left/up arrow is pressed." />
    <event name="OnSpinDown" class="wxSpinEvent" help="Generated when right/down arrow is pressed." />
  </objectinfo>

  <objectinfo class="wxHyperlinkCtrl" icon="hyperlink_ctrl.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">hyperlink</property>
    <property name="label" type="wxString_i18n" help="Text of the hyperlink">wxFB Website</property>
    <property name="url" type="wxString" help="Target of the hyperlink">http://www.wxformbuilder.org</property>
    <property name="hover_color" type="wxColour" help="The colour used to print the label of the hyperlink when the mouse is over the control."/>
    <property name="normal_color" type="wxColour" help="The colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control."/>
    <property name="visited_color" type="wxColour" help="The colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited)."/>
    <property name="style" type="bitlist">
      <option name="wxHL_ALIGN_LEFT" help="Align the text to the left."/>
      <option name="wxHL_ALIGN_RIGHT" help="Align the text to the right."/>
      <option name="wxHL_ALIGN_CENTRE" help="Center the text (horizontally)."/>
      <option name="wxHL_CONTEXTMENU" help="Pop up a context menu when the hyperlink is right-clicked. The context menu contains a &quot;Copy URL&quot; menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control."/>
      <option name="wxHL_DEFAULT_STYLE" help="The default style for wxHyperlinkCtrl: wxNO_BORDER|wxHL_CONTEXTMENU|wxHL_ALIGN_CENTRE."/>
      wxHL_DEFAULT_STYLE
    </property>
    <event name="OnHyperlink" class="wxHyperlinkEvent" help="The hyperlink was (left) clicked. If this event is not handled in user's code (or it's skipped; see wxEvent::Skip), then a call to wxLaunchDefaultBrowser is done with the hyperlink's URL."/>
  </objectinfo>

  <objectinfo class="wxGenericDirCtrl" icon="genericdir_ctrl.xpm" type="expanded_widget">
    <inherits class="wxTreeCtrlBase"/>
    <inherits class="wxWindow">
      <property name="window_style">wxSUNKEN_BORDER</property>
    </inherits>
    <inherits class="AUI" />
    <property name="name" type="text">genericDirCtrl</property>
    <property name="defaultfolder" type="wxString_i18n" help="Initial Directory."/>
    <property name="filter" type="wxString_i18n" help="A filter string, using the same syntax as that for wxFileDialog. This may be empty if filters are not being used. Example: &quot;All files (*.*)|*.*|JPEG files (*.jpg)|*.jpg&quot;."/>
    <property name="defaultfilter" type="uint" help="The zero-indexed default filter setting.">0</property>
    <property name="show_hidden" type="bool" help="Show hidden files">0</property>
    <property name="style" type="bitlist">
      <option name="wxDIRCTRL_DIR_ONLY" help="Only show directories, and not files."/>
      <option name="wxDIRCTRL_3D_INTERNAL" help="Use 3D borders for internal controls."/>
      <option name="wxDIRCTRL_SELECT_FIRST" help="When setting the default path, select the first file in the directory."/>
      <option name="wxDIRCTRL_SHOW_FILTERS" help="Show the drop-down filter list."/>
      <option name="wxDIRCTRL_EDIT_LABELS" help="Allow the folder and file labels to be editable."/>
      <option name="wxDIRCTRL_MULTIPLE" help="Allows multiple files and folders to be selected simultaneously"/>
      wxDIRCTRL_3D_INTERNAL
    </property>
  </objectinfo>

  <objectinfo class="wxScrolledCanvas" icon="scrlcanvas.png" type="widget">
    <inherits class="wxWindow">
      <property name="window_style">wxHSCROLL|wxVSCROLL</property>
    </inherits>
    <inherits class="AUI" />
    <property name="name" type="text">scrlCanvas</property>
    <property name="scroll_rate_x" type="uint" help="Set the horizontal scrolling increment.">5</property>
    <property name="scroll_rate_y" type="uint" help="Set the vertical scrolling increment.">5</property>
  </objectinfo>
  
  <objectinfo class="CustomControl" icon="custom_control.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text" help="The control is added to a sizer using this name.">custom</property>
    <property name="class" type="text" help="The control is generated to XRC with this class.">CustomControl</property>
    <property name="declaration" type="text" help="Code to generate for the declaration of this control."/>
    <property name="construction" type="text" help="Code to generate for the construction of this control."/>
    <property name="include" type="text" help="Code to generate for the include statements for this control."/>
    <property name="settings" type="text" help="Code to generate for the settings of this control."/>
  </objectinfo>

  <objectinfo class="wxMediaCtrl" startgroup="1" icon="media_ctrl.xpm" type="widget">
    <inherits class="wxControl" />
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">mediaCtrl</property>
    <property name="file" type="file" help="The path to media file."/>
    <property name="play" type="bool" help="Play the media file"/>
    <property name="playback_rate" type="float" help="Sets the playback rate, or speed of the media, to that referred by dRate. 1.0 represents normal speed, while 2.0 represents twice the normal speed of the media, for example. Not supported on the GStreamer (Unix) backend.">1</property>
    <property name="volume" type="float" help="Sets the volume of the media from a 0.0 to 1.0 range to that referred by dVolume. 1.0 represents full volume, while 0.5 represents half (50 percent) volume, for example. Note that this may not be exact due to conversion and rounding errors, although setting the volume to full or none is always exact.">1</property>
    <property name="player_controls" type="option">
      <option name="STEP" help="wxMEDIACTRLPLAYERCONTROLS_STEP, Step controls like fastfoward, step one frame etc. "/>
      <option name="VOLUME" help="wxMEDIACTRLPLAYERCONTROLS_VOLUME, Volume controls like the speaker icon, volume slider, etc. "/>
      <option name="DEFAULT" help="wxMEDIACTRLPLAYERCONTROLS_DEFAULT, Default controls for the toolkit. Currently a typedef for wxMEDIACTRLPLAYERCONTROLS_STEP and wxMEDIACTRLPLAYERCONTROLS_VOLUME. "/>
      <option name="NONE" help="wxMEDIACTRLPLAYERCONTROLS_NONE, No controls. return wxMediaCtrl to it's default state. "/>
    </property>
  </objectinfo>

</package>
